class LRUCache:

    def __init__(self, capacity):
        """
        :type capacity: int
        """
        self.capacity = capacity
        self.arr = []
        self.dic = {}
    def get(self, key):
        """
        :type key: int
        :rtype: int
        """
        if key in self.dic:
            # print(self.arr)
            # print(key, self.dic)
            t = self.arr.index(key)
            self.arr.pop(t)
            self.arr.append(key)
            return self.dic[key]
        return -1

    def put(self, key, value):
        """
        :type key: int
        :type value: int
        :rtype: void
        """
        if key in self.arr:
            self.dic[key] = value
            t = self.arr.index(key)
            self.arr.pop(t)
            self.arr.append(key)
        else:
            if len(self.arr) == self.capacity:
                self.dic.pop(self.arr[0])
                self.arr.pop(0)
            self.dic[key] = value
            self.arr.append(key)
        # print('arr', self.arr)
# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)

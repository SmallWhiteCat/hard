class Solution:
    def solve(self, board):
        """
        :type board: List[List[str]]
        :rtype: void Do not return anything, modify board in-place instead.
        """
        if not board:
            return
        m, n = len(board), len(board[0])
        arr = []
        for i in range(n):
            self.bfs(board, 0, i, m, n)
            self.bfs(board, m-1, i, m, n)
            
        for i in range(1, m-1):
            self.bfs(board, i, 0, m, n)
            self.bfs(board, i, n-1, m, n)
            
        for i in range(m):
            for j in range(n):
                temp = board[i][j]
                # print(temp)
                if temp == 'D':
                    board[i][j] = 'O'
                elif temp == 'O':
                    board[i][j] = 'X'
                                  
    def bfs(self, board, i, j, m, n):
        if i<0 or i>m-1 or j<0 or j>n-1 or board[i][j] != 'O':
            return
        # print(board[i][j])
        board[i][j] = 'D'
        # print(board)
        self.bfs(board, i-1, j, m, n)
        self.bfs(board, i, j-1, m, n)
        self.bfs(board, i, j+1, m, n)
        self.bfs(board, i+1, j, m, n)

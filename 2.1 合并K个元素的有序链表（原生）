# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        lists = [i for i in lists if i]
        if len(lists) == 0:
            return []
        
        arr = []    # k个有序列表的第一个元素值的数组
        nodes = []  # k个有序列表的第一个节点数组
        for node in lists:
            arr.append(node.val)
            nodes.append(node)
            
        INT_MAX = 0x7fffff
        head = ListNode(0)
        p = head
        while 1:
            if min(arr) == INT_MAX:
                return head.next
            
            temp = min(arr)
            index = arr.index(temp)     #arr中最小值的索引            
            node = nodes[index]         #取出最小节点,移动最小节点的指针到下一个节点  
                
            p.next = node               #最小节点添加到指针 p 的最后一个节点           
            node = node.next
            p = p.next
            p.next = None
                        
            if node == None:
                arr[index] = INT_MAX
                continue
            
            arr[index] = node.val
            nodes[index] = node

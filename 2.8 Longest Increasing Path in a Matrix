class Solution:
    def longestIncreasingPath(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: int
        """
        if len(matrix) == 0:
            return 0
        m, n = len(matrix), len(matrix[0])
        dp = [ [0]*n for i in range(len(matrix)) ]
        # print(matrix[1][2])
        # print(dp)
        arr = []
        for i in range(m):
            for j in range(n):
                self.dfs(matrix, dp, i, j, m, n)
            arr.append(max(dp[i]))
        print(arr)
        return max(arr)
    def dfs(self, matrix, dp, i, j, m, n):
        if dp[i][j] == 0:
            temp = matrix[i][j]
            up = down = left = right = 0
            if i > 0 and temp < matrix[i-1][j]:
                up = self.dfs(matrix, dp, i-1, j, m, n)
                
            if i < m-1 and temp < matrix[i+1][j]:
                down = self.dfs(matrix, dp, i+1, j, m, n)
                
            if j > 0 and temp < matrix[i][j-1]:
                
                left = self.dfs(matrix, dp, i, j-1, m, n)
                print('left', left)
            if j < n-1 and temp < matrix[i][j+1]:
                right = self.dfs(matrix, dp, i, j+1, m, n)
            
            dp[i][j] = max(up, down, left, right) + 1
            
        return dp[i][j]
        

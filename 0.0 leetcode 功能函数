# 找第一个等于value的key
def findkey(self, dic, value):  
    for key, val in dic.items():
        if val == value:
            return key

# 二分法   nums中查找某个数
while left <= right:        
    mid = left + right >> 1 
    if nums[i] < nums[mid]:
        left = mid + 1
    else:
        right = mid - 1
#第k大的元素，n个相同的元素算n个
def Ksmallst(self, nums1, nums2, k):
    if len(nums1) > len(nums2):
        nums1, nums2 = nums2, nums1
    if not nums1:
        return nums2[k-1]
    if k == 1:
        return min(nums1[0], nums2[0])
    k1 = min(len(nums1), k//2)
    k2 = k - k1
    if nums1[k1-1] < nums2[k2-1]:
        return self.Ksmallst(nums1[k1:], nums2, k2)
    else:
        return self.Ksmallst(nums1, nums2[k2:], k1)
#四平方定理
def numSquares(self, n):
        while n % 4 == 0:
            n //= 4
        if n % 8 == 7:
            return 4 
        k = 0
        while k*k <= n:
            re = int(math.sqrt(n - k*k))
            print(re, k)
            if k*k + re*re == n:
                if k and re:
                    return 2
                return 1
            k += 1     
        return 3
#前缀树
class Node:
    def __init__(self):
        self.children = {}
        self.isWord = False       
class Trie:
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = Node()

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: void
        """
        current = self.root
        for i in word: 
            if i not in current.children:
                child = Node()
                current.children[i] = child
            current = current.children[i]
        current.isWord = True

    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        current = self.root
        for i in word:
            if i not in current.children:
                return False
            current = current.children[i]
        if current.isWord == False:
            return False
        return True

    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        current = self.root
        for i in prefix:
            if i not in current.children:
                return False
            current = current.children[i]
        return True

# Definition for singly-linked list with a random pointer.
# class RandomListNode(object):
#     def __init__(self, x):
#         self.label = x
#         self.next = None
#         self.random = None

class Solution(object):
    def copyRandomList(self, head):
        """
        :type head: RandomListNode
        :rtype: RandomListNode
        """
        if not head :
            return 

        p = head
        while p:
            print('1', p.label)
            temp = RandomListNode(p.label)
            temp.next = p.next
            p.next = temp
            p = p.next.next
        
        p = head
        while p:
            p.next.random = p.random.next if p.random else None #把p指向的random位置后面的新建节点给p.next（也是新建的）的random位置
            p = p.next.next
            
        p = head
        newp = p.next
        new = newp
        while new.next:
            p.next = new.next
            p = p.next
            new.next = p.next
            new = new.next
        
        p.next = None
    
        return newp
